syntax = "proto3";

package sensor.v1;

// Unified Sensor API
message Sensor {
    Type type = 1;
    Event event = 2;

    message Type {
        string name                   = 1; // Sensor object name.
        int32 sensor_id               = 2; // Unique sensor identifier
        Sensor.SensorType sensor_type = 3; // Optional, sensor type identifier
        float max_value               = 4; // Optional, maximum value of this sensor's value in SI units.
        float min_value               = 5; // Optional, minumum value of this sensor's value in SI units.
        float resolution              = 6; // Optional, smallest difference between two values reported by this sensor.
        int32 measurement_period      = 7; // Optional, milliseconds between measurements
    }

    // Data about a sensor event
    message Event {
        // sensor event identification
        int32 sensor_id               = 1;
        Sensor.SensorType sensor_type = 2; // Optional, sensor type identifier
        int32 timestamp               = 3; // event occurance, in milliseconds

        // optional sensor data
        float data               = 4; // raw data
        float temperature        = 5; // in degrees centigrade (Celsius)
        float distance           = 6; // distance in centimeters
        float light              = 7; // light in SI lux units
        float pressure           = 8; //pressure in hectopascal (hPa)
        float relative_humidity  = 9; // relative humidity in percent
        float current            = 10; // current in milliamps (mA)
        float voltage            = 11; // voltage in volts (V)
        // Special sensor data
        SensorVect acceleration = 12; /* acceleration values are in meter per second
                                   per second (m/s^2) */
        SensorVect magnetic     = 13; // magnetic vector values are in micro-Tesla (uT)
        SensorVect orientation  = 14; // orientation values are in degrees
        SensorVect gyro         = 15; // gyroscope values are in rad/s */
        SensorColor colors      = 16;

        // Contains a vector in a common format
        message SensorVect {
            float x       = 1; // X component of vector
            float y       = 2; // Y component of vector
            float z       = 3; // Z component of vector
            // orientation sensors
            float roll    = 4; /* Rotation around the longitudinal axis (the plane body, 'X
                                 axis'). Roll is positive and increasing when moving
                                 downward. -90 degrees <= roll <= 90 degrees */
            float pitch   = 5; /* Rotation around the lateral axis (the wing span, 'Y
                                 axis'). Pitch is positive and increasing when moving
                                 upwards. -180 degrees <= pitch <= 180 degrees) */
            float heading = 6; /* Angle between the longitudinal axis (the plane body)
                                 and magnetic north, measured clockwise when viewing from
                                 the top of the device. 0-359 degrees */
            bytes status = 7;
        }

        // Contains color data in a common format
        message SensorColor {
            float r     = 1; // Red component
            float g     = 2; // Green component
            float b     = 3; // Blue component
            uint32 rgba = 4; // 24-bit RGBA value
        }
    }

    // Sensor types
    enum SensorType {
        SENSOR_TYPE_UNSPECIFIED         = 0; // Unspecified sensor type
        SENSOR_TYPE_ACCELEROMETER       = 1; //  Gravity + linear acceleration
        SENSOR_TYPE_MAGNETIC_FIELD      = 2;
        SENSOR_TYPE_ORIENTATION         = 3;
        SENSOR_TYPE_GYROSCOPE           = 4;
        SENSOR_TYPE_LIGHT               = 5;
        SENSOR_TYPE_PRESSURE            = 6;
        SENSOR_TYPE_PROXIMITY           = 8;
        SENSOR_TYPE_GRAVITY             = 9;
        SENSOR_TYPE_LINEAR_ACCELERATION = 10; // Acceleration not including gravity
        SENSOR_TYPE_ROTATION_VECTOR     = 11;
        SENSOR_TYPE_RELATIVE_HUMIDITY   = 12;
        SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;
        SENSOR_TYPE_OBJECT_TEMPERATURE  = 14;
        SENSOR_TYPE_VOLTAGE             = 15;
        SENSOR_TYPE_CURRENT             = 16;
        SENSOR_TYPE_COLOR               = 17;
    }
}
