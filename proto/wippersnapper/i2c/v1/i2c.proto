// SPDX-FileCopyrightText: 2021 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.i2c.v1;
import "nanopb/nanopb.proto";

/**
* BusResponse represents the state of the I2C bus, from a device.
*/
enum BusResponse {
  BUS_RESPONSE_UNSPECIFIED         = 0; /** Unspecified error occurred. **/
  BUS_RESPONSE_SUCCESS             = 1; /** I2C bus successfully initialized. **/
  BUS_RESPONSE_ERROR_HANG          = 2; /** I2C Bus hang, user should reset their board if this persists. **/
  BUS_RESPONSE_ERROR_PULLUPS       = 3; /** I2C bus failed to initialize - SDA or SCL needs a pull up. **/
  BUS_RESPONSE_ERROR_WIRING        = 4; /** I2C bus failed to communicate - Please check your wiring. **/
  BUS_RESPONSE_UNSUPPORTED_SENSOR  = 5; /** WipperSnapper firmware is outdated and does not include the sensor type - Please update your WipperSnapper firmware. **/
  BUS_RESPONSE_DEVICE_INIT_FAIL    = 6; /** I2C device failed to initialize. **/
  BUS_RESPONSE_DEVICE_DEINIT_FAIL  = 7; /** I2C device failed to de-initialize. **/
}

/**
* I2CBusInitRequest represents a request to
* initialize the I2C bus from the broker.
*/
message I2CBusInitRequest {
  int32  i2c_pin_scl     = 1; /** The desired I2C SCL pin. */
  int32  i2c_pin_sda     = 2; /** The desired I2C SDA pin. */
  uint32 i2c_frequency   = 3; /** The desired I2C SCL frequency, in Hz. Default is 100000Hz. */
  int32  i2c_port_number = 4; /** The I2C port number. */
}

/**
* I2CBusInitResponse represents a response to I2CBusInitRequest
*/
message I2CBusInitResponse {
  bool is_initialized  = 1 [deprecated = true, (nanopb).type = FT_IGNORE]; /** True if the I2C port has been initialized successfully, False otherwise. */
  BusResponse bus_response = 2; /** Whether the I2C bus initialized properly or failed. **/
}

/**
* I2CBusSetFrequency represents a request to change the
* I2C clock speed to a desired frequency, in Hz.
*/
message I2CBusSetFrequency {
  uint32 frequency = 1; /** The desired I2C SCL frequency, in Hz. */
  int32 bus_id     = 2; /** An optional I2C bus identifier, if multiple exist. */
}

/**
* I2CBusScanRequest represents the parameters required to execute
* a device's I2C scan.
*/
message I2CBusScanRequest {
  int32 i2c_port_number              = 1; /** The desired I2C port to scan. */
  I2CBusInitRequest bus_init_request = 2; /** The I2C bus initialization request. */
}

/**
* I2CBusScanResponse represents a list of I2C addresses
* found on the bus after I2CBusScanRequest has executed.
*/
message I2CBusScanResponse {
  repeated uint32 addresses_found  = 1 [packed=true, (nanopb).max_count = 120]; /** The 7-bit addresses of the I2C devices found on the bus, empty if not found. */
  BusResponse bus_response       = 2; /** The I2C bus' status. **/
}

/**
* I2CDeviceSensorProperties contains
* the properties of an I2C device's sensor such as
* its type and period.
*/
message I2CDeviceSensorProperties {
  SensorType sensor_type = 1;
  uint32 sensor_period    = 2;
}


/**
* Represents a list of I2CDeviceInitRequest messages.
*/
message I2CDeviceInitRequests {
  repeated I2CDeviceInitRequest list = 1;
}

/**
* I2CDeviceInitRequest is a wrapper message for
* an I2C device initialization request.
*/
message I2CDeviceInitRequest {
  int32  i2c_port_number                                    = 1; /** The desired I2C port to initialize an I2C device on. */
  I2CBusInitRequest i2c_bus_init_req                        = 2; /** An I2C bus initialization request. */
  uint32 i2c_device_address                                 = 3; /** The 7-bit I2C address of the device on the bus. */
  string i2c_device_name                                    = 4[(nanopb).max_size = 15]; /** The I2C device's name, MUST MATCH the name on the JSON definition file on https://github.com/adafruit/Wippersnapper_Components. */
  repeated I2CDeviceSensorProperties i2c_device_properties  = 5[(nanopb).max_count = 15]; /** Properties of each sensor on the I2C device. */
}

/**
* I2CDeviceInitResponse contains the response from a
* device after processing a I2CDeviceInitRequest message.
*/
message I2CDeviceInitResponse {
  bool is_success             = 1 [deprecated = true, (nanopb).type = FT_IGNORE]; /** !!DEPRECATED!! True if i2c device initialized successfully, false otherwise. */
  uint32 i2c_device_address   = 2; /** The 7-bit I2C address of the device on the bus. */
  BusResponse bus_response    = 3; /** The I2C bus' status. **/
}

/**
* I2CDeviceUpdateRequest is a wrapper message which
* contains a message to update a specific device's properties.
*/
message I2CDeviceUpdateRequest {
  int32  i2c_port_number                                    = 1; /** The desired I2C port. */
  uint32 i2c_device_address                                 = 2; /** The 7-bit I2C address of the device on the bus. */
  string i2c_device_name                                    = 3[(nanopb).max_size = 15]; /** The I2C device's name, MUST MATCH the name on the JSON file. */
  repeated I2CDeviceSensorProperties i2c_device_properties  = 4[(nanopb).max_count = 15]; /** Properties for the I2C device's sensors. */
}

/**
* I2CDeviceUpdateResponse represents if an I2C device's
* sensor(s) is/are successfully updated.
*/
message I2CDeviceUpdateResponse {
  uint32 i2c_device_address   = 1; /** The 7-bit I2C address of the device which was updated. */
  bool is_success             = 2 [deprecated = true, (nanopb).type = FT_IGNORE]; /** !!DEPRECATED!! True if the update request succeeded, False otherwise. */
  BusResponse bus_response    = 3; /** The I2C bus' status. **/
}

/**
* I2CDeviceDeinitRequest is a wrapper message containing
* a deinitialization request for a specific i2c device.
*/
message I2CDeviceDeinitRequest {
  int32  i2c_port_number        = 1; /** The desired I2C port to de-initialize an I2C device on. */
  uint32 i2c_device_address     = 2; /** The 7-bit I2C address of the device on the bus. */
}

/**
* I2CDeviceDeinitResponse represents if an I2C device's
* sensor(s) is/are successfully de-initialized.
*/
message I2CDeviceDeinitResponse {
  bool is_success           = 1 [deprecated = true, (nanopb).type = FT_IGNORE]; /** True if the deinitialization request succeeded, False otherwise. */
  uint32 i2c_device_address = 2; /** The 7-bit I2C address of the device which was initialized. */
  BusResponse bus_response  = 3; /** The I2C bus' status. **/
}

/** Adafruit Unified Sensor Library Messages. */

/**
* SensorType allows us determine what types of units the sensor uses, etc.
*/
enum SensorType {
  SENSOR_TYPE_UNSPECIFIED         = 0;
  SENSOR_TYPE_ACCELEROMETER       = 1; /** Gravity + linear acceleration */
  SENSOR_TYPE_MAGNETIC_FIELD      = 2;
  SENSOR_TYPE_ORIENTATION         = 3;
  SENSOR_TYPE_GYROSCOPE           = 4;
  SENSOR_TYPE_LIGHT               = 5;
  SENSOR_TYPE_PRESSURE            = 6;
  SENSOR_TYPE_PROXIMITY           = 8;
  SENSOR_TYPE_GRAVITY             = 9;
  SENSOR_TYPE_LINEAR_ACCELERATION = 10; /** Acceleration not including gravity */
  SENSOR_TYPE_ROTATION_VECTOR     = 11;
  SENSOR_TYPE_RELATIVE_HUMIDITY   = 12;
  SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;
  SENSOR_TYPE_OBJECT_TEMPERATURE  = 14;
  SENSOR_TYPE_VOLTAGE             = 15;
  SENSOR_TYPE_CURRENT             = 16;
  SENSOR_TYPE_COLOR               = 17;
  SENSOR_TYPE_RAW                 = 18;
  SENSOR_TYPE_PM10_STD            = 19; /** Standard Particulate Matter 1.0 */
  SENSOR_TYPE_PM25_STD            = 20; /** Standard Particulate Matter 2.5 */
  SENSOR_TYPE_PM100_STD           = 21; /** Standard Particulate Matter 100 */
  SENSOR_TYPE_PM10_ENV            = 22; /** Environmental Particulate Matter 1.0 */
  SENSOR_TYPE_PM25_ENV            = 23; /** Environmental Particulate Matter 2.5 */
  SENSOR_TYPE_PM100_ENV           = 24; /** Environmental Particulate Matter 100 */
  SENSOR_TYPE_CO2                 = 25; /** CO2 */
  SENSOR_TYPE_GAS_RESISTANCE      = 26; /** The resistance (in Ohms) of the gas sensor.  This is proportional to the amount of VOC particles in the air. */
  SENSOR_TYPE_ALTITUDE            = 27; /** The altitude in meters. */
}

/**
* SensorEvent  is used to return the sensor's value and type.
*/
message SensorEvent {
  SensorType type = 1; /** The sensor's type and corresponding SI unit */
  float value     = 2; /** The sensor's value */
}

/**
* Each I2CDeviceEvent represents data from **one** I2C sensor.
* NOTE: An I2CDeviceEvent can have multiple sensor events if
* the I2C device contains > 1 sensor.
*/
message I2CDeviceEvent {
  uint32 sensor_address              = 1; /** The 7-bit I2C address of the I2C device. */
  repeated SensorEvent sensor_event  = 2[(nanopb).max_count = 15]; /** A, optionally repeated, SensorEvent from a sensor. */
}
