// SPDX-FileCopyrightText: 2021 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.i2c.v1;
import "nanopb/nanopb.proto";

/**
* I2CBusInitRequest represents a request to
* initialize an I2C Component.
*/
message I2CBusInitRequest {
  int32  i2c_pin_scl     = 1; /** The desired I2C SCL pin. */
  int32  i2c_pin_sda     = 2; /** The desired I2C SDA pin. */
  uint32 i2c_frequency   = 3; /** The desired I2C SCL frequency, in Hz. Default is 100000Hz. */
  int32  i2c_port_number = 4; /** The I2C port number. */
}

/**
* I2CBusInitResponse represents a response to I2CBusInitRequest
*/
message I2CBusInitResponse {
  bool is_initialized = 1; /** True if the I2C port has been initialized successfully, False otherwise. */
}

/**
* I2CBusSetFrequency represents a request to change the
* I2C clock speed to a desired frequency, in Hz.
*/
message I2CBusSetFrequency {
  uint32 frequency = 1; /** The desired I2C SCL frequency, in Hz. */
  int32 bus_id     = 2; /** An optional I2C bus identifier, if multiple exist. */
}

/**
* I2CBusScanRequest represents the parameters required to execute
* a device's I2C scan.
*/
message I2CBusScanRequest {
  int32  i2c_port_number  = 1; /** The desired I2C port to scan. */
}

/**
* I2CBusScanResponse represents a list of I2C addresses
* found on the bus after I2CBusScanRequest has executed.
*/
message I2CBusScanResponse {
  repeated uint32 addresses_found = 1 [packed=true, (nanopb).max_count = 120]; /** The 7-bit addresses of the I2C devices found on the bus, empty if not found. */
}

/**
* I2CDeviceInitRequest is a wrapper message containing
* an i2c-device-specific initialization request.
*/
message I2CDeviceInitRequest {
  int32  i2c_port_number                 = 1; /** The desired I2C port to initialize an I2C device on. */
  uint32 i2c_address                     = 2; /** The 7-bit I2C address of the device on the bus. */
  AHTInitRequest aht_init                = 3; /** A request to initialize an AHTX0 i2c sensor device. */
  DPS310InitRequest dps310_init          = 4; /** A request to initialize a DPS310 i2c sensor device. */
}

/**
* I2CDeviceInitResponse represents if an i2c device
* is successfully initialized by the client.
*/
message I2CDeviceInitResponse {
    bool is_success = 1; /** True if i2c device initialized successfully, false otherwise. */
}

/**
* I2CDeviceUpdateRequest is a wrapper message containing
* a update request for a specific i2c device.
*/
message I2CDeviceUpdateRequest {
    int32  i2c_port_number        = 1; /** The desired I2C port. */
    uint32 i2c_address            = 2; /** The 7-bit I2C address of the device on the bus. */
    AHTUpdateRequest aht          = 3; /** A request to update the sensors of an AHTX0 sensor. */
    DPS310UpdateRequest dps       = 4; /** A request to update the sensors of a DPS310 sensor. */
}

/**
* I2CDeviceUpdateResponse represents if an I2C device's
* sensor(s) is/are successfully updated.
*/
message I2CDeviceUpdateResponse {
    uint32 i2c_address  = 1; /** The 7-bit I2C address of the device which was updated. */
    bool is_success     = 2; /** True if the update request succeeded, False otherwise. */
}

/**
* I2CDeviceDeinitRequest is a wrapper message containing
* a deinitialization request for a specific i2c device.
*/
message I2CDeviceDeinitRequest {
    int32  i2c_port_number        = 1; /** The desired I2C port to de-initialize an I2C device on. */
    uint32 i2c_address            = 2; /** The 7-bit I2C address of the device on the bus. */
    I2CDeviceType i2c_device_type = 3; /** The type of I2C device we are de-initializing. */

  /**
   * I2CDeviceType contains the type of I2C device we are de-initializing.
   */
  enum I2CDeviceType {
    I2C_DEVICE_TYPE_UNSPECIFIED = 0; /** Unspecified device type from Broker. */
    I2C_DEVICE_TYPE_AHTX0       = 1; /** AHTX0 I2C Device. */
    I2C_DEVICE_TYPE_DPS310      = 2; /** DPS310 I2C Device. */
  }
}

/**
* I2CDeviceDeinitResponse represents if an I2C device's
* sensor(s) is/are successfully de-initialized.
*/
message I2CDeviceDeinitResponse {
    bool is_success     = 1; /** True if the deinitialization request succeeded, False otherwise. */
    uint32 i2c_address  = 2; /** The 7-bit I2C address of the device which was initialized. */
}

// Device-specific //
/**
* AHTInitRequest represents the request to initialize
* an AHTX0 temperature/humidity sensor.
*/
message AHTInitRequest {
  bool enable_temperature  = 1; /** True if AHTX0 expects to init. the temperature data object, False otherwise. */
  float period_temperature = 2; /** Specifies the time between temperature sensor measurements, in seconds. */
  bool enable_humidity     = 3; /** True if AHTX0 expects to init. the humidity data object, False otherwise. */
  float period_humidity    = 4; /** Specifies the time between humidity sensor measurements, in seconds. */
}

/**
* AHTUpdateRequest represents the request to update
* an AHTX0 temperature/humidity sensor.
*/
message AHTUpdateRequest {
  bool disable_temperature = 1; /** True to disable the AHTX0's temperature sensor. */
  bool disable_humidity    = 2; /** True to disable the AHTX0's humidity sensor. */
  float period_temperature = 3; /** Specifies the time between temperature sensor measurements, in seconds. */
  float period_humidity    = 4; /** Specifies the time between humidity sensor measurements, in seconds. */
}

/**
* DPS310 represents the request to initialize
* a DPS310 Precision Barometric Pressure and Altitude Sensor.
*/
message DPS310InitRequest {
  bool enable_temperature  = 1; /** True if DPS310 expects to init. the temperature data object, False otherwise. */
  float period_temperature = 2; /** Specifies the time between temperature sensor measurements, in seconds. */
  bool enable_pressure     = 3; /** True if DPS310 expects to init. the pressure data object, False otherwise. */
  float period_pressure    = 4; /** Specifies the time between pressure sensor measurements, in seconds. */
}

/**
* DPS310UpdateRequest represents the request to update
* a DPS310 barometric pressure and altitude sensor.
*/
message DPS310UpdateRequest {
  bool disable_pressure     = 1; /** True to disable the DPS310's temperature sensor. */
  bool disable_temperature  = 2; /** True to disable the DPS310's humidity sensor. */
  float period_pressure     = 4; /** Specifies the time between pressure sensor measurements, in seconds. */
  float period_temperature  = 5; /** Specifies the time between temperature sensor measurements, in seconds. */
}


/** Adafruit Unified Sensor Library Messages. */

/**
* SensorType allows us determine what types of units the sensor uses, etc.
*/
enum SensorType {
  SENSOR_TYPE_UNSPECIFIED         = 0;
  SENSOR_TYPE_ACCELEROMETER       = 1;
  SENSOR_TYPE_MAGNETIC_FIELD      = 2;
  SENSOR_TYPE_ORIENTATION         = 3;
  SENSOR_TYPE_GYROSCOPE           = 4;
  SENSOR_TYPE_LIGHT               = 5;
  SENSOR_TYPE_PRESSURE            = 6;
  SENSOR_TYPE_PROXIMITY           = 8;
  SENSOR_TYPE_GRAVITY             = 9;
  SENSOR_TYPE_LINEAR_ACCELERATION = 10;
  SENSOR_TYPE_ROTATION_VECTOR     = 11;
  SENSOR_TYPE_RELATIVE_HUMIDITY   = 12;
  SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;
  SENSOR_TYPE_VOLTAGE             = 15;
  SENSOR_TYPE_CURRENT             = 16;
  SENSOR_TYPE_COLOR               = 17;
  SENSOR_TYPE_RAW                 = 18;
}

/**
* SensorDetails is used to describe basic information about a specific sensor.
*/
message SensorDetails {
  string name      = 1; /** The sensor name or ID, up to a maximum of twelve characters (ex. "MPL115A2"). */
  int32 version    = 2; /** The version of the sensor HW and the driver to allow us to differentiate versions of the board or driver. */
  int32 id         = 3; /** A unique sensor identifier that is used to differentiate this specific sensor instance from any others that are present on the system or in the sensor network */
  SensorType type  = 4; /** The sensor type, based on SensorType */
  float max_value  = 5; /** The maximum value that this sensor can return (in the appropriate SI unit) */
  float min_value  = 6; /** The minimum value that this sensor can return (in the appropriate SI unit) */
  float resolution = 7; /** The smallest difference between two values that this sensor can report (in the appropriate SI unit) */
  int32 min_delay  = 8; /** The minimum delay in microseconds between two sensor events, or '0' if there is no constant sensor rate */
}

/**
* SensorEvent  is used to return sensor data from any sensor supported by the abstraction layer,
* using standard SI units and scales.
*/
message SensorEvent {
  int32 version   = 1; /** Contain 'sizeof(sensors_event_t)' to identify which version of the API we're using in case this changes in the future */
  int32 sensor_id = 2; /** A unique sensor identifier that is used to differentiate this specific sensor instance from any others that are present on the system or in the sensor network */
  SensorType type = 3; /** The sensor type, based on SensorType */
  int32 timestamp = 4; /** Time in milliseconds when the sensor value was read */
  oneof event_data {
    float temperature       = 5;
    float distance          = 6;
    float light             = 7;
    float pressure          = 8;
    float relative_humidity = 9;
    float current           = 10;
    float voltage           = 11;
    uint32 raw_value        = 12;
  }
}

/**
* I2CSensorEvent represents data from an I2C Sensor, including its address.
* NOTE: In the future, we may want to pack repeated SensorEvents.
*/
message I2CSensorEvent {
  uint32 sensor_address  = 1; /** The 7-bit I2C address of the device on the bus. */
  SensorEvent event      = 2; /** A SensorEvent from the device. */
} 