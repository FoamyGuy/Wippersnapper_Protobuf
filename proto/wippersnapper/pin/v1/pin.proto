// SPDX-FileCopyrightText: 2020 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.pin.v1;
import "nanopb/nanopb.proto";

/* Pin API for interfacing with analog or digital pins  */
// Request to create or update a pin's configuration
// MQTT Topic: `/device/ID/signal`
message ConfigurePinRequest {
  string pin_name      = 1 [(nanopb).max_size = 5]; // Name of pin to access
  Mode mode            = 2; // Pin mode
  Direction direction  = 3; // Pin direction
  Pull pull            = 4; // Pull value
  uint32 period        = 5; // Number of milliseconds between measurements

  /* Defines pin mode */
  enum Mode {
    MODE_UNSPECIFIED = 0; // Invalid pin mode
    MODE_ANALOG      = 1; // Analog pin
    MODE_DIGITAL     = 2; // Digital pin
  }

  /* Defines which direction the values are going */
  enum Direction {
    DIRECTION_UNSPECIFIED = 0; // Invalid direction
    DIRECTION_INPUT       = 1; // Read data in
    DIRECTION_OUTPUT      = 2; // Write data out
  }

  /* Defines a pull value for digital pin reads */
  enum Pull {
    PULL_UNSPECIFIED = 0; // Invalid pull value
    PULL_UP          = 1; // Pulls the line high
    PULL_DOWN        = 2; // Pulls the line low
  }
}

message ConfigurePinRequests {
  repeated ConfigurePinRequest list = 1;
}

// Sends data about the value of a pin, bi-directional
message PinEvent {
  string pin_name = 1 [(nanopb).max_size = 5];
  string pin_value = 2 [(nanopb).max_size = 12];
}

message PinEvents {
  repeated PinEvent list = 1;
}

/* PWM Pin API */

// Configures a PWM output pin
message ConfigurePWMPinRequest {
  // Pin to write to
  string pin_name         = 1 [(nanopb).max_size = 5];

  // Duty cycle between always off (0)
  // and always on (255)
  int32 duty_cycle        = 2;

  // Target frequency, in Hz
  int32 frequency         = 3;

  // If the frequency changes over time
  // NOTE: CIRCUITPYTHON-API ONLY
  bool variable_frequency = 4;
}

message ConfigurePWMPinRequests {
  repeated ConfigurePWMPinRequest list = 1;
}

// Write duty cycle to a pin PWM output pin
message PWMPinEvent {
  // Duty cycle between always off (0)
  // and always on (255)
  int32 duty_cycle        = 2;
}

message PWMPinEvents {
  repeated PWMPinEvent list = 1;
}
