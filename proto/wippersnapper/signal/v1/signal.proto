// SPDX-FileCopyrightText: 2020-2021 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.signal.v1;

// Non-WipperSnapper
import "nanopb/nanopb.proto";

// WipperSnapper
import "wippersnapper/pin/v1/pin.proto";
import "wippersnapper/i2c/v1/i2c.proto";

/**
* I2CRequest represents the broker's request for a specific i2c command to a device.
*/
message I2CRequest {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.i2c.v1.I2CBusInitRequest req_i2c_init                  = 1;
    wippersnapper.i2c.v1.I2CBusScanRequest req_i2c_scan                  = 2;
    wippersnapper.i2c.v1.I2CBusSetFrequency req_i2c_set_freq             = 3;
    wippersnapper.i2c.v1.I2CDeviceInitRequest req_i2c_device_init     = 4;
    wippersnapper.i2c.v1.I2CDeviceDeinitRequest req_i2c_device_deinit = 5;
  }
}

/**
* I2CResponse represents the device's response to an I2C-specific message from IO.
*/
message I2CResponse {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.i2c.v1.I2CBusInitResponse resp_i2c_init                  = 1;
    wippersnapper.i2c.v1.I2CBusScanResponse resp_i2c_scan                  = 2;
    wippersnapper.i2c.v1.I2CDeviceInitResponse resp_i2c_device_init     = 3;
    wippersnapper.i2c.v1.I2CDeviceDeinitResponse resp_i2c_device_deinit = 4;
    wippersnapper.i2c.v1.I2CDeviceEvent resp_i2c_device_event           = 5;
  }
}

message CreateSignalRequest {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    // Create, update or remove a GPIO pin
    wippersnapper.pin.v1.ConfigurePinRequests pin_configs               = 6;
    // Update a pins state
    wippersnapper.pin.v1.PinEvent pin_event                             = 15;
    // Create, update or remove a PWM output pin
    wippersnapper.pin.v1.ConfigurePWMPinRequests pwm_pin_config         = 10;
    // Write duty cycle to a PWM output pin
    wippersnapper.pin.v1.PWMPinEvents pwm_pin_event                     = 12;
    // Update a pin's state
    wippersnapper.pin.v1.PinEvents pin_events                           = 7;
    // I2C Sensor API, !DEPRECATED! //
    // Initiates an RPC to scan an I2C bus for a specific I2C bus address
    wippersnapper.i2c.v1.I2CBusScanRequest request_i2c_scan                = 16 [deprecated = true, (nanopb).type = FT_IGNORE];
    // Sensor-specific APIs
    // Initialize an AHTX0 sensor
    wippersnapper.i2c.v1.AHTInitRequest request_aht_init                = 17 [deprecated = true, (nanopb).type = FT_IGNORE];
    // De-Initialize an AHTX0 sensor
    wippersnapper.i2c.v1.AHTDeinitRequest request_aht_deinit            = 18 [deprecated = true, (nanopb).type = FT_IGNORE];
  }
}

/**
* Response from a signal message payload (device->broker)
*/
message SignalResponse {
  oneof payload {
    bool configuration_complete = 1; /** True if a device successfully completed a ConfigurePinRequests message, False otherwise. */
  }
}