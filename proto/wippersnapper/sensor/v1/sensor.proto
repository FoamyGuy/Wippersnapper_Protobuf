// SPDX-FileCopyrightText: 2020 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.sensor.v1;

/* Unified Sensor API */

// Sensor responses
enum SensorResponses {
    SENSOR_RESPONSES_UNSPECIFIED                = 0; // Invalid CreateOrUpdateSensorRequest
    SENSOR_RESPONSES_OK                         = 1; // Sensor action was successful
    SENSOR_RESPONSES_DUPLICATE_ID               = 2; // sensor_id already defined on board definition
    SENSOR_RESPONSES_MISSING_SENSOR_ID          = 3; // sensor_id not found on board definition
    SENSOR_RESPONSES_INVALID_SENSOR_TYPE        = 4; // Invalid SensorType requested
    SENSOR_RESPONSES_MAX_MIN_VALUE_TYPE         = 5; // max_value and min_value not provided as float types
    SENSOR_RESPONSES_MEASUREMENT_PERIOD_INVALID = 6; // Measurement period may not be < -1 (no readings)
}

// Creates or updates a sensor component on the board definition
// MQTT Topic: `/device/ID/signal`
message AttachOrUpdateSensorRequest {
    string name                   = 1; // Sensor object name.
    int32 sensor_id               = 2; // Unique sensor identifier
    SensorType sensor_type        = 3; // Optional, sensor type identifier
    float max_value               = 4; // Optional, maximum value of this sensor's value in SI units.
    float min_value               = 5; // Optional, minumum value of this sensor's value in SI units.
    int32 measurement_period      = 7; // Optional, milliseconds between measurements

    // Sensor types
    enum SensorType {
        SENSOR_TYPE_UNSPECIFIED         = 0; // Unspecified sensor type
        SENSOR_TYPE_ACCELEROMETER       = 1; //  Gravity + linear acceleration
        SENSOR_TYPE_MAGNETIC_FIELD      = 2;
        SENSOR_TYPE_ORIENTATION         = 3;
        SENSOR_TYPE_GYROSCOPE           = 4;
        SENSOR_TYPE_LIGHT               = 5;
        SENSOR_TYPE_PRESSURE            = 6;
        SENSOR_TYPE_PROXIMITY           = 8;
        SENSOR_TYPE_GRAVITY             = 9;
        SENSOR_TYPE_LINEAR_ACCELERATION = 10; // Acceleration not including gravity
        SENSOR_TYPE_ROTATION_VECTOR     = 11;
        SENSOR_TYPE_RELATIVE_HUMIDITY   = 12;
        SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;
        SENSOR_TYPE_OBJECT_TEMPERATURE  = 14;
        SENSOR_TYPE_VOLTAGE             = 15;
        SENSOR_TYPE_CURRENT             = 16;
        SENSOR_TYPE_COLOR               = 17;
    }
}

message AttachOrUpdateSensorRequests {
  repeated AttachOrUpdateSensorRequest list = 1;
}

// CreateOrUpdateSensorResponse from Adafruit IO
// MQTT Topic: `/device/ID/signal`
message AttachOrUpdateSensorResponse {
    SensorResponses response = 1;
}

// Detaches/removes a sensor from a board definition
// MQTT Topic: `/device/ID/signal`
message DetachSensorRequest {
    int32 sensor_id = 1; // Unique sensor identifier
}

// Response from detaching or removing a sensor from a board definition
// MQTT Topic: `/device/ID/signal`
message DetachSensorResponse {
    SensorResponses response = 1;
}

// Encapsulates and sends details about a sensor reading (event) to Adafruit IO
// MQTT Topic: `/device/ID/signal`
message SensorEventRequest {
    int32 sensor_id               = 1; // Unique sensor identifier
    int32 timestamp               = 2; // event occurance, in milliseconds, TODO: Change ts. to timestamp struct type?

    oneof value {
        float data               = 3; // raw data
        float temperature        = 4; // in degrees centigrade (Celsius)
        float distance           = 5; // distance in centimeters
        float light              = 6; // light in SI lux units
        float pressure           = 7; //pressure in hectopascal (hPa)
        float relative_humidity  = 8; // relative humidity in percent
        float current            = 9; // current in milliamps (mA)
        float voltage            = 10; // voltage in volts (V)
        SensorVect acceleration = 11; /* acceleration values are in meter per second
                                        per second (m/s^2) */
        SensorVect magnetic     = 12; // magnetic vector values are in micro-Tesla (uT)
        SensorVect orientation  = 13; // orientation values are in degrees
        SensorVect gyro         = 14; // gyroscope values are in rad/s */
        SensorColor colors      = 15; // color data in RGB/RGBA format
    }

    // Contains a vector in a common format
    message SensorVect {
        float x       = 1; // X component of vector
        float y       = 2; // Y component of vector
        float z       = 3; // Z component of vector
        // orientation sensors
        float roll    = 4; /* Rotation around the longitudinal axis (the plane body, 'X
                                axis'). Roll is positive and increasing when moving
                                downward. -90 degrees <= roll <= 90 degrees */
        float pitch   = 5; /* Rotation around the lateral axis (the wing span, 'Y
                                axis'). Pitch is positive and increasing when moving
                                upwards. -180 degrees <= pitch <= 180 degrees) */
        float heading = 6; /* Angle between the longitudinal axis (the plane body)
                                and magnetic north, measured clockwise when viewing from
                                the top of the device. 0-359 degrees */
        bytes status = 7;
    }

    // Contains color data in a common format
    message SensorColor {
        float r     = 1; // Red component
        float g     = 2; // Green component
        float b     = 3; // Blue component
        uint32 rgba = 4; // 24-bit RGBA value
    }
}

message SensorEventRequests {
  repeated SensorEventRequest list = 1;
}
