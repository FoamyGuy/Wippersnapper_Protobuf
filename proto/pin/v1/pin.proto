syntax = "proto3";

package pin.v1;

/* Pin API for interfacing with analog or digital pins  */

// todo: split out config and mode from here

// Request to create or update a pin's configuration
// MQTT Topic: `/device/ID/signal`
message CreateOrUpdatePinRequest {
    string name          = 1; // Name of pin to access
    Configuration config = 2; // Carries pin configuration data
    Event event          = 3; // Describes a pin event

    message Configuration {
        Mode mode           = 1; // Pin mode
        Direction direction = 2; // Pin direction
        Pull pull           = 3; // Pull value
        int32 period        = 4; // Number of milliseconds between measurements
        enum Mode {
            MODE_UNSPECIFIED = 0; // Invalid pin mode
            MODE_ANALOG      = 1; // Analog pin
            MODE_DIGITAL     = 2; // Digital pin
            MODE_PULL_UP     = 3; // Digital pin with a pull value
        }

        /* Defines which direction the values are going */
        enum Direction {
            DIRECTION_UNSPECIFIED = 0; // Invalid direction
            DIRECTION_INPUT       = 1; // Read data in
            DIRECTION_OUTPUT      = 2; // Write data out
        }

        /* Defines the pull value for digital pin reads */
        enum Pull {
            PULL_UNSPECIFIED = 0; // Invalid pull value
            PULL_UP          = 1; // Pull the line high
            PULL_DOWN        = 2; // Pull the line low
        }
    }

    message Event {
        //TODO: revisit this, maybe just accept string data like IO
        oneof value { // Data from Adafruit IO or hardware
            int32 i_val = 1;
            bool b_val  = 2;
            float f_val = 3;
            string s_val = 4;
        }
    }
}

// Response from creating or updating a pin's configuration
// MQTT Topic: `/device/ID/signal`
message CreateOrUpdatePinResponse {
    PinResponse response = 1;
    enum PinResponse { // TODO this might need to be shared for GetPin
        PIN_RESPONSE_UNSPECIFIED = 0; // Invalid Pin Response
        PIN_RESPONSE_INPUT_ONLY  = 1; // Pin is input only
        PIN_RESPONSE_INVALID_DIRECTION  = 2; // Pin direction is invalid
        PIN_RESPONSE_INVALID_PULL = 3; // Unsupported pull value
    }
}