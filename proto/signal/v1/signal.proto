syntax = "proto3";

package signal.v1;

/* Signal Message */
message Signal {

    /* Standard command message */
    message Command {
        CmdMode mode      = 1; // Command mode
        CmdType type      = 2; // Command type
        Pin pin           = 3; // Pin-specific command parameters
        string board_name = 4; // Hardware name
        PWM pwm           = 5; // PWM output command
        Location location = 6; // Location metadata
      }
      Command command = 1;

    /* BlinkaConnect command mode */
    enum CmdMode {
      CMD_MODE_UNSPECIFIED  = 0; // Unspecified/invalid command name
      CMD_MODE_GET          = 1; // Gets data from a device OR IO
      CMD_MODE_SET          = 2; // Sets data to a device OR IO
    }

    /* BlinkaConnect command types */
    enum CmdType {
      CMD_TYPE_UNSPECIFIED        = 0; // Unspecified/invalid command name
      CMD_TYPE_LOCATION           = 1; // Device location
      CMD_TYPE_BATTERY            = 2; // Device battery level
      CMD_TYPE_LIST_PINS_ANALOG   = 3; // List all analog pins
      CMD_TYPE_LIST_PINS_DIGITAL  = 4; // List all digital pins
      CMD_TYPE_PIN_VALUE          = 5; // Digital or analog pin value
      CMD_TYPE_PIN_MODE           = 6; // Digital or analog pin mode
      CMD_TYPE_PWM_OUTPUT         = 7; // Output PWM on a provided pin
      // TODO: Add more commands here
    }
}

// Device location
message Location {
    float latitude   = 1;
    float longitude  = 2;
    float altitude   = 3;
}

/* Pin  API for interfacing with analog or digital pins  */
message Pin {
    string name         = 1; // Name of pin to access
    Mode mode           = 2; // Pin mode
    Direction direction = 3; // Pin direction
    Pull pull           = 4; // Pull value
    string value        = 5; // Pin value or logic level
    int32 period        = 6; // Number of milliseconds between measurements

    enum Mode {
        MODE_UNSPECIFIED = 0; // Invalid pin mode
        MODE_ANALOG      = 1; // Analog pin
        MODE_DIGITAL     = 2; // Digital pin
        MODE_PULL_UP     = 3; // Digital pin with a pull value
    }

    /* Defines which direction the values are going */
    enum Direction {
        DIRECTION_UNSPECIFIED = 0; // Invalid direction
        DIRECTION_INPUT       = 1; // Read data in
        DIRECTION_OUTPUT      = 2; // Write data out
    }

    /* Defines the pull value for digital pin reads */
    enum Pull {
        PULL_UNSPECIFIED = 0; // Invalid pull value
        PULL_UP          = 1; // Pull the line high
        PULL_DOWN        = 2; // Pull the line low
    }
}

/* PWM API for outputting a PWM signal on a provided pin  */
message PWM {
    string pin_name   = 1; // Output pin
    int32 duty_cycle  = 2; // Fraction of one period the pulse is high
    int32 frequency   = 3; // Frequency, in Hertz
}

