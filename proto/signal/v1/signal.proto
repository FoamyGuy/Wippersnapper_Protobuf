syntax = "proto3";

package signal.v1;

/* Signal is a device command or response
   transmitted by an Adafruit IO feed.
   Feed name: devices/ID/signals 
*/
message Signal {
    /* BlinkaConnect command type */
    enum CmdType {
      CMD_TYPE_UNSPECIFIED = 0; // Unspecified/invalid command name
      CMD_TYPE_GET         = 1; // Gets data from a device OR IO
      CMD_TYPE_SET         = 2; // Sets data to a device OR IO
    }

    /* BlinkaConnect command types */
    enum CmdName {
      CMD_NAME_UNSPECIFIED        = 0; // Unspecified/invalid command name
      CMD_NAME_VERSION            = 1; // BlinkaConnect version
      CMD_NAME_LOCATION           = 2; // Device location
      CMD_NAME_BATTERY            = 3; // Device battery level
      CMD_NAME_LIST_PINS_ANALOG   = 4; // List all analog pins
      CMD_NAME_LIST_PINS_DIGITAL  = 5; // List all digital pins
      CMD_NAME_PIN_VALUE          = 6; // Pin value
      CMD_NAME_PIN_MODE           = 7; // Pin mode
      // TODO: Add more commands here
    }

    /* Standard command message */
    message Command {
      CmdType type  = 1; // Command type
      CmdName name  = 2; // Command name
    }
    Command cmd = 1; // One command per signal

    /* PinCommand Message
    *  Uses standard command message
    *  plus additional information about
    *  the pin */
    message PinCommand {
      Command command      = 1; // Standard command message
      Direction direction  = 2; // Pin direction
      string pin           = 3; // Desired pin name
      Mode mode            = 4; // Pin mode
      Pull pull            = 5; // Pull value
      string value         = 6; // Pin value or logic level

      enum Mode {
        MODE_UNSPECIFIED = 0; // Invalid pin mode
        MODE_ANALOG      = 1; // Analog pin
        MODE_DIGITAL     = 2; // Digital pin
        MODE_PULL_UP     = 3; // Digital pin with a pull value
        MODE_PWM         = 4; // PWM-capible pin
      }

      /* Defines which direction the values are going */
      enum Direction {
        DIRECTION_UNSPECIFIED = 0; // Invalid direction
        DIRECTION_INPUT       = 1; // Read data in
        DIRECTION_OUTPUT      = 2; // Write data out
      }

      /* Defines the pull value for digital pin reads */
      enum Pull {
        PULL_UNSPECIFIED = 0; // Invalid pull value
        PULL_UP          = 1; // Pull the line high
        PULL_DOWN        = 2; // Pull the line low
      }

    }
    PinCommand pin_cmd = 2;
}