syntax = "proto3";

package signal.v1;

import "sensor/v1/sensor.proto";
import "pin/v1/pin.proto";
import "pixel/v1/pixel.proto";

/* Signal Message */
message Signal {
    /* Standard command message */
    message Command {
        CmdMode mode            = 1; // Command mode
        CmdType type            = 2; // Command type
        string board_name       = 3; // Hardware name
        Location location       = 4; // Location metadata
        pin.v1.Pin pin                 = 5; // Pin-specific command parameters
        PWM pwm                 = 6; // PWM output command, TODO!
        repeated sensor.v1.Sensor sensors = 7; // Unified Sensor API
        pixel.v1.Pixel pixel             = 8; // Pixel API
      }
      Command command = 1;

    /* BlinkaConnect command mode */
    enum CmdMode {
      CMD_MODE_UNSPECIFIED = 0; // Unspecified/invalid command name
      CMD_MODE_GET         = 1; // Gets data from a device or IO
      CMD_MODE_SET         = 2; // Sets data from a device or IO
    }

    /* BlinkaConnect command types */
    enum CmdType {
      CMD_TYPE_UNSPECIFIED = 0; // Unspecified/invalid command name
      CMD_TYPE_LOCATION    = 1; // Device location
      CMD_TYPE_BATTERY     = 2; // Device battery level
      CMD_TYPE_PIN_VALUE   = 3; // Digital or analog pin value
      CMD_TYPE_PIN_MODE    = 4; // Digital or analog pin mode
      CMD_TYPE_PWM_OUTPUT  = 5; // Output PWM on a provided pin
      CMD_TYPE_SENSOR      = 6; // Read sensor details
      CMD_TYPE_PIXEL       = 7; // Pixel API
    }
}


// Device location
message Location {
    float latitude  = 1;
    float longitude = 2;
    float altitude  = 3;
}

// PWM API for outputting a PWM signal on a provided pin 
// TODO: This requires improvement and an example, WIP
message PWM {
    string pin_name   = 1; // Output pin
    int32 duty_cycle  = 2; // Fraction of one period the pulse is high
    int32 frequency   = 3; // Frequency, in Hertz
}

