syntax = "proto3";

package signal.v1;

/* Signal Message */
message Signal {
    /* Standard command message */
    message Command {
        CmdMode mode            = 1; // Command mode
        CmdType type            = 2; // Command type
        string board_name       = 3; // Hardware name
        Location location       = 4; // Location metadata
        Pin pin                 = 5; // Pin-specific command parameters
        PWM pwm                 = 6; // PWM output command, TODO!
        Sensor sensor = 7; // Unified Sensor API
        Pixel pixel             = 8; // Pixel API
      }
      Command command = 1;

    /* BlinkaConnect command mode */
    enum CmdMode {
      CMD_MODE_UNSPECIFIED = 0; // Unspecified/invalid command name
      CMD_MODE_GET         = 1; // Gets data from a device or IO
      CMD_MODE_SET         = 2; // Sets data from a device or IO
    }

    /* BlinkaConnect command types */
    enum CmdType {
      CMD_TYPE_UNSPECIFIED = 0; // Unspecified/invalid command name
      CMD_TYPE_LOCATION    = 1; // Device location
      CMD_TYPE_BATTERY     = 2; // Device battery level
      CMD_TYPE_PIN_VALUE   = 3; // Digital or analog pin value
      CMD_TYPE_PIN_MODE    = 4; // Digital or analog pin mode
      CMD_TYPE_PWM_OUTPUT  = 5; // Output PWM on a provided pin
      CMD_TYPE_SENSOR      = 6; // Read sensor details
      CMD_TYPE_PIXEL       = 7; // Pixel API
    }
}

// Unified sensor API
message Sensor {
    Type type = 1;
    Event event = 2;

    message Type {
        string name                   = 1; // Sensor object name.
        int32 sensor_id               = 2; // Unique sensor identifier
        Sensor.SensorType sensor_type = 3; // Optional, sensor type identifier
        float max_value               = 4; // Optional, maximum value of this sensor's value in SI units.
        float min_value               = 5; // Optional, minumum value of this sensor's value in SI units.
        float resolution              = 6; // Optional, smallest difference between two values reported by this sensor.
        int32 measurement_period      = 7; // Optional, milliseconds between measurements
    }

    // Data about a sensor event
    message Event {
        // sensor event identification
        int32 sensor_id               = 1;
        Sensor.SensorType sensor_type = 2; // Optional, sensor type identifier
        int32 timestamp               = 3; // event occurance, in milliseconds

        // optional sensor data
        float data               = 4; // raw data
        float temperature        = 5; // in degrees centigrade (Celsius)
        float distance           = 6; // distance in centimeters
        float light              = 7; // light in SI lux units
        float pressure           = 8; //pressure in hectopascal (hPa)
        float relative_humidity  = 9; // relative humidity in percent
        float current            = 10; // current in milliamps (mA)
        float voltage            = 11; // voltage in volts (V)
        // Special sensor data
        SensorVect acceleration = 12; /* acceleration values are in meter per second
                                   per second (m/s^2) */
        SensorVect magnetic     = 13; // magnetic vector values are in micro-Tesla (uT)
        SensorVect orientation  = 14; // orientation values are in degrees
        SensorVect gyro         = 15; // gyroscope values are in rad/s */
        // TODO: sensors_color_t

        // used to return a vector in a common format
        message SensorVect {
            float x       = 1; // X component of vector
            float y       = 2; // Y component of vector
            float z       = 3; // Z component of vector
            // orientation sensors
            float roll    = 4; /* Rotation around the longitudinal axis (the plane body, 'X
                                 axis'). Roll is positive and increasing when moving
                                 downward. -90 degrees <= roll <= 90 degrees */
            float pitch   = 5; /* Rotation around the lateral axis (the wing span, 'Y
                                 axis'). Pitch is positive and increasing when moving
                                 upwards. -180 degrees <= pitch <= 180 degrees) */
            float heading = 6; /* Angle between the longitudinal axis (the plane body)
                                 and magnetic north, measured clockwise when viewing from
                                 the top of the device. 0-359 degrees */
            bytes status = 7;
        }
    }

    // Sensor types
    enum SensorType {
        SENSOR_TYPE_UNSPECIFIED         = 0; // Unspecified sensor type
        SENSOR_TYPE_ACCELEROMETER       = 1; //  Gravity + linear acceleration
        SENSOR_TYPE_MAGNETIC_FIELD      = 2;
        SENSOR_TYPE_ORIENTATION         = 3;
        SENSOR_TYPE_GYROSCOPE           = 4;
        SENSOR_TYPE_LIGHT               = 5;
        SENSOR_TYPE_PRESSURE            = 6;
        SENSOR_TYPE_PROXIMITY           = 8;
        SENSOR_TYPE_GRAVITY             = 9;
        SENSOR_TYPE_LINEAR_ACCELERATION = 10; // Acceleration not including gravity
        SENSOR_TYPE_ROTATION_VECTOR     = 11;
        SENSOR_TYPE_RELATIVE_HUMIDITY   = 12;
        SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;
        SENSOR_TYPE_OBJECT_TEMPERATURE  = 14;
        SENSOR_TYPE_VOLTAGE             = 15;
        SENSOR_TYPE_CURRENT             = 16;
        SENSOR_TYPE_COLOR               = 17;
    }

}

// Addressable Pixel API
message Pixel {
    int32 pixel_pin      = 1; // Pin to send data to
    PixelType pixel_type = 2; // Type of pixel connected to pin
    PixelData pixel_data = 3; // Represents pixel data
    int32 pixelbuf_sz    = 4; // Buffer size required to store the pixel_data

    message PixelData {
        uint32 byte_idx      = 1;
        uint32 flags         = 2;
        repeated string data = 3;
    }

    // Type of pixel connected to hardware
    enum PixelType {
        PIXEL_TYPE_UNSPECIFIED = 0; // Unspecified pixel type
        PIXEL_TYPE_WS2812      = 1; // WS2812 (NeoPixel)
        PIXEL_TYPE_APA201      = 2; // APA201 (DotStar)
    }
}

// Device location
message Location {
    float latitude  = 1;
    float longitude = 2;
    float altitude  = 3;
}

/* Pin  API for interfacing with analog or digital pins  */
message Pin {
    string name         = 1; // Name of pin to access
    Mode mode           = 2; // Pin mode
    Direction direction = 3; // Pin direction
    Pull pull           = 4; // Pull value
    string value        = 5; // Pin value or logic level
    int32 period        = 6; // Number of milliseconds between measurements

    enum Mode {
        MODE_UNSPECIFIED = 0; // Invalid pin mode
        MODE_ANALOG      = 1; // Analog pin
        MODE_DIGITAL     = 2; // Digital pin
        MODE_PULL_UP     = 3; // Digital pin with a pull value
    }

    /* Defines which direction the values are going */
    enum Direction {
        DIRECTION_UNSPECIFIED = 0; // Invalid direction
        DIRECTION_INPUT       = 1; // Read data in
        DIRECTION_OUTPUT      = 2; // Write data out
    }

    /* Defines the pull value for digital pin reads */
    enum Pull {
        PULL_UNSPECIFIED = 0; // Invalid pull value
        PULL_UP          = 1; // Pull the line high
        PULL_DOWN        = 2; // Pull the line low
    }
}

// PWM API for outputting a PWM signal on a provided pin 
// TODO: This requires improvement and an example, WIP
message PWM {
    string pin_name   = 1; // Output pin
    int32 duty_cycle  = 2; // Fraction of one period the pulse is high
    int32 frequency   = 3; // Frequency, in Hertz
}

