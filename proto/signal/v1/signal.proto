syntax = "proto3";

package signal.v1;

/* Signal Message */
message Signal {
    /* BlinkaConnect command type */
    enum CmdType {
      CMD_TYPE_UNSPECIFIED  = 0; // Unspecified/invalid command name
      CMD_TYPE_GET          = 1; // Gets data from a device OR IO
      CMD_TYPE_SET          = 2; // Sets data to a device OR IO
    }

    /* BlinkaConnect command types */
    enum CmdName {
      CMD_NAME_UNSPECIFIED        = 0; // Unspecified/invalid command name
      CMD_NAME_VERSION            = 1; // BlinkaConnect version
      CMD_NAME_LOCATION           = 2; // Device location
      CMD_NAME_BATTERY            = 3; // Device battery level
      CMD_NAME_LIST_PINS_ANALOG   = 4; // List all analog pins
      CMD_NAME_LIST_PINS_DIGITAL  = 5; // List all digital pins
      CMD_NAME_PIN_VALUE          = 6; // Digital or analog pin value
      CMD_NAME_PIN_MODE           = 7; // Digital or analog pin mode
      CMD_NAME_PWM_OUTPUT         = 8; // Output PWM on a provided pin
      // TODO: Add more commands here
    }

    /* Standard command message */
    message Command {
      CmdType type      = 1; // Command type
      CmdName name      = 2; // Command name
      Pin pin           = 3; // Pin-specific command parameters
      Version version   = 4; // Library version metadata
      PWM pwm           = 5; // TODO
      Location location = 6; // TODO
      Battery battery   = 7; // TODO
    }
    Command command = 1;
}

// Version
// Contains BlinkaConnect's firmware API version
 message Version {
    uint64 major = 1;
    uint64 minor = 2;
    uint64 micro = 3;
    string label = 4;
  }

// Device location
message Location {
    float latitude   = 1;
    float longitude  = 2;
    float altitude   = 3;
}

// Battery level
message Battery {
    float level = 1;
}

/* Pin - API for interfacing with analog or digital pins  */
message Pin {
    string name          = 1; // Name of pin to access
    Mode mode            = 2; // Pin mode
    Direction direction  = 3; // Pin direction
    Pull pull            = 4; // Pull value
    string value         = 5; // Pin value or logic level


    enum Mode {
        MODE_UNSPECIFIED = 0; // Invalid pin mode
        MODE_ANALOG      = 1; // Analog pin
        MODE_DIGITAL     = 2; // Digital pin
        MODE_PULL_UP     = 3; // Digital pin with a pull value
    }

    /* Defines which direction the values are going */
    enum Direction {
        DIRECTION_UNSPECIFIED = 0; // Invalid direction
        DIRECTION_INPUT       = 1; // Read data in
        DIRECTION_OUTPUT      = 2; // Write data out
    }

    /* Defines the pull value for digital pin reads */
    enum Pull {
        PULL_UNSPECIFIED = 0; // Invalid pull value
        PULL_UP          = 1; // Pull the line high
        PULL_DOWN        = 2; // Pull the line low
    }
}

/* Pin - API for outputting a PWM signal on a provided pin  */
message PWM {
    string pin_name   = 1; // Output pin
    int32 duty_cycle  = 2; // Fraction of one period the pulse is high
    int32 frequency   = 3; // Frequency, in Hertz
}

