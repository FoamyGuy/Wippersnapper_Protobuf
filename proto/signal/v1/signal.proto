syntax = "proto3";

package signal.v1;

/* Signal Message */
message Signal {

    /* Standard command message */
    message Command {
        CmdMode mode      = 1; // Command mode
        CmdType type      = 2; // Command type
        string board_name = 3; // Hardware name
        Location location = 4; // Location metadata
        Pin pin           = 5; // Pin-specific command parameters
        PWM pwm           = 6; // PWM output command
        Sensor sensor     = 7; // Unified Sensor API
      }
      Command command = 1;

    /* BlinkaConnect command mode */
    enum CmdMode {
      CMD_MODE_UNSPECIFIED  = 0; // Unspecified/invalid command name
      CMD_MODE_GET          = 1; // Gets data from a device OR IO
      CMD_MODE_SET          = 2; // Sets data to a device OR IO
    }

    /* BlinkaConnect command types */
    enum CmdType {
      CMD_TYPE_UNSPECIFIED        = 0; // Unspecified/invalid command name
      CMD_TYPE_LOCATION           = 1; // Device location
      CMD_TYPE_BATTERY            = 2; // Device battery level
      CMD_TYPE_PIN_VALUE          = 3; // Digital or analog pin value
      CMD_TYPE_PIN_MODE           = 4; // Digital or analog pin mode
      CMD_TYPE_PWM_OUTPUT         = 5; // Output PWM on a provided pin
      CMD_TYPE_SENSOR             = 6; // Read sensor details
      // TODO: Add more commands here
    }
}

/* Unified Sensor API */
message Sensor {
    // Data about the sensor itself
    message Type {
        string name = 1; // Sensor name
        int32 sensor_id = 2; // Unique sensor identifier
        SensorType type = 3; // TODO: implement type enum
        float max_value = 4; // Maximum value of this sensor's value in SI units.
        float min_value = 5; // Minimum value of this sensor's value in SI units.
        float resolution = 6; // Smallest difference between two values reported by this sensor.
        int32 measurement_period = 7; // Milliseconds between measurements

        enum SensorType {
            // TODO: desc. for each sensor type
            SENSOR_TYPE_UNSPECIFIED         = 0; // Unspecified sensor type
            SENSOR_TYPE_ACCELEROMETER       = 1; //  Gravity + linear acceleration
            SENSOR_TYPE_MAGNETIC_FIELD      = 2;
            SENSOR_TYPE_ORIENTATION         = 3;
            SENSOR_TYPE_GYROSCOPE           = 4;
            SENSOR_TYPE_LIGHT               = 5;
            SENSOR_TYPE_PRESSURE            = 6;
            SENSOR_TYPE_PROXIMITY           = 8;
            SENSOR_TYPE_GRAVITY             = 9;
            SENSOR_TYPE_LINEAR_ACCELERATION = 10; // Acceleration not including gravity
            SENSOR_TYPE_ROTATION_VECTOR     = 11;
            SENSOR_TYPE_RELATIVE_HUMIDITY   = 12;
            SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;
            SENSOR_TYPE_OBJECT_TEMPERATURE  = 14;
            SENSOR_TYPE_VOLTAGE             = 15;
            SENSOR_TYPE_CURRENT             = 16;
            SENSOR_TYPE_COLOR               = 17;
        }
    }
    // Data about sensor event
    message Event {
        // sensor event identification
        int32 sensor_id = 1;
        float sensor_type = 2; // TODO: This needs to be sensor_type enum.
        int32 timestamp = 3; // event occurance, in milliseconds

        // optional sensor data
        float data = 4; // raw data
        float temperature = 5; // in degrees centigrade (Celsius)
        float distance = 6; // distance in centimeters
        float light = 7; // light in SI lux units
        float pressure = 8; //pressure in hectopascal (hPa)
        float relative_humidity = 9; // relative humidity in percent
        float current = 10; // current in milliamps (mA)
        float voltage = 11; // voltage in volts (V)
        // Special sensor data
        // TODO: Acceleration
        // TODO: Orientation
        // TODO: Gyro
        // TODO: Magnetic
        // TODO: Color
    }
}


// Device location
message Location {
    float latitude   = 1;
    float longitude  = 2;
    float altitude   = 3;
}

/* Pin  API for interfacing with analog or digital pins  */
message Pin {
    string name         = 1; // Name of pin to access
    Mode mode           = 2; // Pin mode
    Direction direction = 3; // Pin direction
    Pull pull           = 4; // Pull value
    string value        = 5; // Pin value or logic level
    int32 period        = 6; // Number of milliseconds between measurements

    enum Mode {
        MODE_UNSPECIFIED = 0; // Invalid pin mode
        MODE_ANALOG      = 1; // Analog pin
        MODE_DIGITAL     = 2; // Digital pin
        MODE_PULL_UP     = 3; // Digital pin with a pull value
    }

    /* Defines which direction the values are going */
    enum Direction {
        DIRECTION_UNSPECIFIED = 0; // Invalid direction
        DIRECTION_INPUT       = 1; // Read data in
        DIRECTION_OUTPUT      = 2; // Write data out
    }

    /* Defines the pull value for digital pin reads */
    enum Pull {
        PULL_UNSPECIFIED = 0; // Invalid pull value
        PULL_UP          = 1; // Pull the line high
        PULL_DOWN        = 2; // Pull the line low
    }
}

/* PWM API for outputting a PWM signal on a provided pin  */
message PWM {
    string pin_name   = 1; // Output pin
    int32 duty_cycle  = 2; // Fraction of one period the pulse is high
    int32 frequency   = 3; // Frequency, in Hertz
}

